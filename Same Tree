public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // Base case 1: Both nodes are null
        if (p == null && q == null) {
            return true;
        }
        
        // Base case 2: One of the nodes is null, but the other is not
        if (p == null || q == null) {
            return false;
        }
        
        // Base case 3: The values of the nodes are different
        if (p.val != q.val) {
            return false;
        }
        
        // Recursively compare the left and right subtrees
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }

    public static void main(String[] args) {
        // Example 1: Input: p = [1,2,3], q = [1,2,3]
        TreeNode p1 = new TreeNode(1);
        p1.left = new TreeNode(2);
        p1.right = new TreeNode(3);

        TreeNode q1 = new TreeNode(1);
        q1.left = new TreeNode(2);
        q1.right = new TreeNode(3);

        Solution solution = new Solution();
        System.out.println(solution.isSameTree(p1, q1));  // Output: true

        // Example 2: Input: p = [1,2], q = [1,null,2]
        TreeNode p2 = new TreeNode(1);
        p2.left = new TreeNode(2);

        TreeNode q2 = new TreeNode(1);
        q2.right = new TreeNode(2);

        System.out.println(solution.isSameTree(p2, q2));  // Output: false

        // Example 3: Input: p = [1,2,1], q = [1,1,2]
        TreeNode p3 = new TreeNode(1);
        p3.left = new TreeNode(2);
        p3.right = new TreeNode(1);

        TreeNode q3 = new TreeNode(1);
        q3.left = new TreeNode(1);
        q3.right = new TreeNode(2);

        System.out.println(solution.isSameTree(p3, q3));  // Output: false
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int val) {
        this.val = val;
    }
}
